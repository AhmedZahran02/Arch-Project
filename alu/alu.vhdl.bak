

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use ieee.numeric_std.all;
use ieee.std_logic_textio.all;
use std.textio.all;


entity alu is 
GENERIC (n : integer := 32;
	 SelSize : integer := 3 );
port(
	Data1,Data2: in std_logic_vector (n - 1 downto 0) ; 
	Sel: in std_logic_vector(SelSize - 1 downto 0);
	FlagsIn:in std_logic_vector(2 downto 0);
	FlagsOut:out std_logic_vector(2 downto 0) ;
	DataOut : out std_logic_vector(n - 1 downto 0));

end entity alu;

architecture Structural of alu is 

component n_bit_adder IS
GENERIC (n : integer);
PORT   (a, b : IN std_logic_vector(n-1 DOWNTO 0) ;
             cin : IN std_logic;
             s : OUT std_logic_vector(n-1 DOWNTO 0);
             cout : OUT std_logic);

END component n_bit_adder;


component GenericMux is
    generic (
        M : positive;  
        K : positive);
    port (
        Inputs   : in  std_logic_vector(2**K * M - 1 downto 0);  -- Input signals
        Sel      : in  std_logic_vector(K - 1 downto 0);          -- Select lines
        Output   : out std_logic_vector(M - 1 downto 0)           -- Output signal
    );
end component GenericMux;



signal AND_OUT,OR_OUT,ADD_OUT,SUB_OUT,Data1_Bar,Data2_Bar :std_logic_vector(n-1 downto 0);
signal Z1,Z2,Z3,C1,C2,C3,N1,N2,N3,dummy1 : std_logic;
begin

Data1_Bar <= not Data1;
Data2_Bar <= not Data2;

AND_OUT <= Data1 AND Data2;
OR_OUT <= Data1 OR Data2;

addition: n_bit_adder GENERIC MAP (n) port map (Data1,Data2,'0',ADD_Out,C1);

subtraction: n_bit_adder GENERIC MAP (n) port map (Data1,Data2,'0',SUB_OUT,dummy1);


end architecture Structural;